openapi: "3.0.2"
# This is your document metadata.
info:
  title: OAuth 2
  description: |-
    OAuth 2 produces an access token which is required to authorise API calls for a given app.

  version: '0.17' 
# Servers where this API is hosted  
servers:
  - url: https://api.platform.bt.com
    description: BT
  - url: https://api.wholesale.bt.com
    description: BT Wholesale

# Describe your paths here
paths:
  /oauth/accesstoken:
    post:          
      summary: Post access token 
      operationId: postAccessToken
      description: |-

        <p>OAuth 2 produces an access token which is required to authorise API calls for a given app.</p>
        <p>Resource features:</p>
          <ul><li>OAuth access tokens generated by OAuth API are valid for a limited period which is returned in the API response.</li></ul>
          <ul><li>If the token expires, this API will need to be called again.</li></ul>

        <details>
        <summary><b>Sandbox responses</b></summary>

        This API resource is not deployed to the sandbox.</br>
        </details>

      x-codeSamples:
        - lang: 'Shell'
          label: cURL
          source: |                 
            curl -XPOST 
            -H "Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ="
            -H "Content-Type: application/x-www-form-urlencoded" 
            https://api.platform.bt.com/oauth/accesstoken?grant_type=client_credentials

      security:
        - BasicAuth: []
      # parameter section
      parameters:
        - name: Authorization
          in: header
          example: "Basic Z2g3alowRWcyST4YXc5cmJDTGRBWkcxOGZkTkw6TTV5VFFFazFBcFRJMXBBVw=="
          description: "To produce the authorisation string, the app's client ID, ':' and password are concatenated and base64-encoded. This string is prefixed with 'Basic '."
          required: true
          schema:
            type: string
            format: "basicAuth"
            minLength: 7
            pattern: "^[B,b]asic [a-z,A-Z,0-9=]+$"
        - name: Content-Type
          in: header
          description: "The supported format is 'application/x-www-form-urlencoded'."
          required: true
          schema:
            type: string  

      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                grant_type: 
                  type: string
                  description: "Only 'client_credentials' is supported."
            example: 'grant_type=client_credentials'     
        required: true

      responses:
        # Response code      
        '200':
          description: |
            OK
          # Response body content.          
          content:
            # JSON response with a schema referenced from the
            # components object.          
           application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponsePost'           
              example: {"accessToken": "2YotnFZFEjr1zCsicMWpAA","token_type": "BearerToken","expiresIn": "899"}

        '400':    # status code
           description: |
            Bad Request

            | Code | Message | Description |
            | ---- | ------- | ----------- |
            | invalid_request | <ol><li>Missing credentials</li> <li>Missing grant_type</li> <li>Missing Content-Type</li> <li>Unsupported Media Type</li> <li>Invalid input parameter</li></ol> | <ol><li>The request is missing a <i>Authorization</i> header.</li> <li>The request is missing a grant_type.</li> <li>The request is missing a Content-Type header.</li> <li>The Content-Type header contains value other than 'application/x-www-form-urlencoded'.</li> <li>The request contains: </br> a. Unsupported parameters. </br> b. Multiple credentials. </br> c. More than one mechanism for authenticating.</li></ol> |
            | unsupported_grant_type | Invalid grant_type | The authorisation grant type is not supported by the authorisation server. |
           content:
            application/json:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: {"code": "invalid_request","message": "Missing credentials"}
           headers:
            Content-Type:
              schema:
                type: string
              description: The value of Content-Type should be "application/json".
            Cache-Control:
              schema:
                type: string
              description: The value of Cache-Control should be "no-store".
            Pragma:
              schema:
                type: string
              description: The value of Pragma should be "no-cache".
            charset:
              schema:
                type: string
              description: The value of charset should be "UTF-8".
            WWW-Authenticate:
              schema:
                type: string
              description: The matching the authentication scheme used by the client.

        '401':    # status code
           description: |
            Unauthorized

            | Code | Message | Description |
            | ---- | ------- | ----------- |
            | invalid_client | Client authentication failed | Client authentication failed due to </br> <ol><li>Unknown client.</li> <li>No client authentication included.</li> <li>Unsupported authentication method other than Basic. When the authentication scheme is other than 'Basic' it should throw an error along with 'WWW-Authenticate' response header field matching the authentication scheme used by the client.</li></ol> |
           content:
            application/json:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: {"code": "invalid_client","message": "Client authentication failed"}
           headers:
            Content-Type:
              schema:
                type: string
              description: The value of Content-Type should be "application/json".
            Cache-Control:
              schema:
                type: string
              description: The value of Cache-Control should be "no-store".
            Pragma:
              schema:
                type: string
              description: The value of Pragma should be "no-cache".
            charset:
              schema:
                type: string
              description: The value of charset should be "UTF-8".
            WWW-Authenticate:
              schema:
                type: string
              description: The matching the authentication scheme used by the client.

        '500':    # status code
           description: |
            Internal Server Error
            
            | Code | Message | Description |
            | ---- | ------- | ----------- |
            | server_error | OAuth server failure | The server fails to generate access-token. |
            | Internal error | Internal Server error | Transient technical error in API layer. |
           content:
            application/json:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: {"code": "server_error","message": "OAuth server failure"}
           headers:
            Content-Type:
              schema:
                type: string
              description: The value of Content-Type should be "application/json".
            Cache-Control:
              schema:
                type: string
              description: The value of Cache-Control should be "no-store".
            Pragma:
              schema:
                type: string
              description: The value of Pragma should be "no-cache".
            charset:
              schema:
                type: string
              description: The value of charset should be "UTF-8".
            WWW-Authenticate:
              schema:
                type: string
              description: The matching the authentication scheme used by the client.


    get:

      summary: Get access token 
      operationId: GenerateAccessToken
      description: |-

        <p>Provides OAuth authentication function for getting a bearer token.</p>
        <p>Resource features:</p>
         <ul><li>OAuth access tokens generated by OAuth API are valid for a limited period which is returned in the API response.</li></ul>
        <ul><li>If the token expires, this API will need to be called again.</li></ul>


        <details>
        <summary><b>Sandbox responses</b></summary>

        This API resource is not deployed to the sandbox.
        </details>


      x-codeSamples:
        - lang: 'Shell'
          label: cURL
          source: |                 
            curl -XGET 
            -H "Authorization: Basic TjRlbXZTR0NTSVNaU3kxQXhuZzE1Z0pBMkZ4NDVnZ0M6d01GajVjb2tvTlgzbGJPbw==" 
            -H "Accept: application/json" 
            https://api.platform.bt.com/oauth/accesstoken?grant_type=client_credentials

         
      security:
        - BasicAuth: []
      # parameter section
      parameters:
        - name: Authorization
          in: header
          example: Basic Z2g3alowRWcyST4YXc5cmJDTGRBWkcxOGZkTkw6TTV5VFFFazFBcFRJMXBBVw==
          description: "To produce the authorisation string, the appâ€™s client ID, ':' and password are concatenated and base64-encoded. This string is prefixed with 'Basic '."
          required: true
          schema:
            type: string      

        - name: grant_type
          in: query
          example: client_credentials
          description: "Only 'client_credentials' is supported."
          required: true
          schema:
            type: string


      # Expected responses for this operation:        
      responses:
        # Response code      
        '200':  # status code
          description: | 
           OK 
          # Response body content.          
          content:
            # JSON response with a schema referenced from the
            # components object.          
           application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'           
              example: {"accessToken": "LciqsiFx1G4Bp0qHxIe47SkLSxR3","token_type": "BearerToken","expiresIn": "86400"}

        '400':    # status code
           description: |
            Bad Request

            | Code | Message | Description |
            | ---- | ------- | ----------- |
            | 27 | Missing query-string parameter | One or more query-string parameters are missing. |
            | 31 | Invalid grant type | Requested authentication grant type is invalid. |
           content:
            application/json:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: {"code": "27", "message": "Missing query-string parameter"}
            application/xml:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: |
              <error>
                <code>27</code> 
                <message>Missing query-string parameter</message>
              </error>

           headers:
            Content-Type:
              schema:
                type: string
              description: The value of Content-Type should be "application/json".
            Cache-Control:
              schema:
                type: string
              description: The value of Cache-Control should be "no-store".
            Pragma:
              schema:
                type: string
              description: The value of Pragma should be "no-cache".
            charset:
              schema:
                type: string
              description: The value of charset should be "UTF-8".
            WWW-Authenticate:
              schema:
                type: string
              description: The matching the authentication scheme used by the client.

        '401':    # status code
           description: |
            Unauthorized

            | Code | Message | Description |
            | ---- | ------- | ----------- |
            | 40 | Missing credentials | The <i>Authorization</i> parameter is missing. |
            | 41 | Invalid credentials | The <i>Authorization</i> parameter is not valid. |        
           content:
            application/json:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: {"code": "41", "message": "Invalid credentials"}
            application/xml:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: |
              <error>
                <code>41</code> 
                <message>Invalid credentials</message>
              </error>

           headers:
            Content-Type:
              schema:
                type: string
              description: The value of Content-Type should be "application/json".
            Cache-Control:
              schema:
                type: string
              description: The value of Cache-Control should be "no-store".
            Pragma:
              schema:
                type: string
              description: The value of Pragma should be "no-cache".
            charset:
              schema:
                type: string
              description: The value of charset should be "UTF-8".
            WWW-Authenticate:
              schema:
                type: string
              description: The matching the authentication scheme used by the client.
           
        '404':    # status code
           description: |
            Not Found

            | Code | Message | Description |
            | ---- | ------- | ----------- |
            | 60 | Resource not found | The requested URI or resource does not exist. |            
           content:
            application/json:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: {"code": "60", "message": "Resource not found"}
            application/xml:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: |
              <error>
                <code>60</code> 
                <message>Resource not found</message>
              </error>

           headers:
            Content-Type:
              schema:
                type: string
              description: The value of Content-Type should be "application/json".
            Cache-Control:
              schema:
                type: string
              description: The value of Cache-Control should be "no-store".
            Pragma:
              schema:
                type: string
              description: The value of Pragma should be "no-cache".
            charset:
              schema:
                type: string
              description: The value of charset should be "UTF-8".
            WWW-Authenticate:
              schema:
                type: string
              description: The matching the authentication scheme used by the client.

        '406':    # status code
           description: |
            Not Acceptable

            | Code | Message | Description |
            | ---- | ------- | ----------- |
            | 62 | Not acceptable | The <i>Accept</i> header does not match a supported content-type. |            
           content:
            application/json:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: {"code": "62","message": "Not acceptable"}
            application/xml:
             schema:
                $ref: '#/components/schemas/FailureResponse'
             example: |
              <error>
                <code>62</code> 
                <message>Not acceptable</message>
              </error>

           headers:
            Content-Type:
              schema:
                type: string
              description: The value of Content-Type should be "application/json".
            Cache-Control:
              schema:
                type: string
              description: The value of Cache-Control should be "no-store".
            Pragma:
              schema:
                type: string
              description: The value of Pragma should be "no-cache".
            charset:
              schema:
                type: string
              description: The value of charset should be "UTF-8".
            WWW-Authenticate:
              schema:
                type: string
              description: The matching the authentication scheme used by the client.



components:
  # Schemas is a map of names to Schema objects
  securitySchemes:
    BasicAuth:
      type: http
      scheme: Basic
                
  schemas:
    SuccessResponse:
     type: object
     properties:
        accessToken:
         type: string
         description: The access token issued by the OAuth server.
        token_type:
         type: string
         description: The type of the token issued (the value returned is 'BearerToken').
        expiresIn:
         type: integer
         description: Duration for which token is active in seconds (e.g. 3600).
     required:
       - accessToken
       - token_type
       - expiresIn

    SuccessResponsePost:
     type: object
     properties:
        accessToken:
         type: string
         description: The access token issued by the OAuth server.
        token_type:
         type: string
         description: The type of the token issued (the value returned is 'BearerToken').
        expiresIn:
         type: integer
         description: Duration for which token is active in seconds (e.g. 3600).

    FailureResponse:
       type: object
       required:
        - code
        - message
       properties:
        code:
          type: string
          description: Represents the error code. 
        message:
          type: string
          description: Represents the error message.    